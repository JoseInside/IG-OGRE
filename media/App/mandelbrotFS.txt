#version 330 core

in vec2 vUv0; // out of vertex shader (mandelbrot)
in vec2 vUv1; // out of vertex shader (flare)
uniform vec4 InColor;
uniform vec4 OutColor1;
uniform vec4 OutColor2;
uniform float Tiempo;
uniform sampler2D texturaFlare;

const int MaxIter = 500;
out vec4 fFragColor;

void main(){
	
	float Creal = vUv0.s - Tiempo  ; // traslación
	float Cimag = vUv0.t; 
	Creal *= 2.5;	//1.04;
	Cimag *= 2.5;	//1.107;

	float real = Creal;
	float imag = Cimag;
	float r2 = 0.0;
	int iter = 0;
	float tempreal = 0.0;
	vec4 fragTextura;		//DE LA IMAGEN FLARE

	while (iter < MaxIter && r2 < 4.0){
		tempreal = real;
		real = (tempreal * tempreal) - (imag * imag) + Creal;
		imag = 2.0 * tempreal * imag + Cimag;
		r2 = (real* real) + (imag*imag);
		iter = iter + 1;
	}
	vec4 color = InColor;

	if(r2 > 4.0)
		color = mix(OutColor1, OutColor2, fract(float(iter)/25.0));
	
	fragTextura = vec4(vec3(texture2D(texturaFlare, vUv1)),2);	//PARA RECOGER EL COLOR (El 1 es extra para aumentar el vector)

	//SALIDA
	fFragColor = vec4(color * fragTextura);

}